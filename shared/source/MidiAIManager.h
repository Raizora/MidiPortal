/**
 * @file MidiAIManager.h
 * @brief Defines the MidiAIManager class.
 * 
 * This file defines the MidiAIManager class, which manages AI/ML models
 * for MIDI processing.
 */

#pragma once

#include <juce_gui_basics/juce_gui_basics.h>
#include <juce_audio_basics/juce_audio_basics.h>
#include <juce_events/juce_events.h>
#include <vector>
#include <string>
#include <memory>
#include "../include/RustBindings.h"

namespace MidiPortal {

/**
 * @class MidiAIManager
 * @brief Manages AI/ML models for MIDI processing.
 * 
 * This class manages AI/ML models for MIDI processing, including loading models,
 * processing MIDI messages, and generating insights.
 */
class MidiAIManager : public juce::Timer
{
public:
    /**
     * @struct AIInsight
     * @brief Represents an insight generated by an AI model.
     * 
     * This struct represents an insight generated by an AI model, including
     * the type of insight, a description, and a confidence score.
     */
    struct AIInsight
    {
        /**
         * @enum Type
         * @brief The type of insight.
         * 
         * Defines the different types of insights that can be generated.
         * - Pattern: Insights about patterns in the MIDI data.
         * - Performance: Insights about performance characteristics.
         * - Style: Insights about musical style.
         */
        enum class Type
        {
            Pattern,
            Performance,
            Style
        };
        
        /**
         * @brief The type of insight.
         * 
         * The type of insight, such as pattern, performance, or style.
         */
        Type type;
        
        /**
         * @brief The description of the insight.
         * 
         * A human-readable description of the insight.
         */
        juce::String description;
        
        /**
         * @brief The confidence score of the insight.
         * 
         * A value between 0.0 and 1.0 indicating the confidence of the insight.
         */
        float score;
    };
    
    /**
     * @brief Default constructor.
     * 
     * Initializes the MidiAIManager with default settings.
     */
    MidiAIManager();
    
    /**
     * @brief Destructor.
     * 
     * Cleans up resources used by the MidiAIManager.
     */
    ~MidiAIManager();
    
    /**
     * @brief Processes a MIDI message.
     * @param message The MIDI message to process.
     * @param deviceName The name of the device that sent the message.
     * 
     * Processes a MIDI message, updating the AI models with the new data.
     */
    void processMidiMessage(const juce::MidiMessage& message, const juce::String& deviceName);
    
    /**
     * @brief Gets insights from the AI models.
     * @return A vector of insights.
     * 
     * Gets insights from the AI models based on the processed MIDI data.
     */
    std::vector<AIInsight> getInsights();
    
    /**
     * @brief Loads a model from a file.
     * @param filePath The path to the model file.
     * @return true if the model was loaded successfully, false otherwise.
     * 
     * Loads a model from a file, making it available for use.
     */
    bool loadModel(const juce::String& filePath);
    
    /**
     * @brief Unloads a model.
     * @param modelId The ID of the model to unload.
     * @return true if the model was unloaded successfully, false otherwise.
     * 
     * Unloads a model, freeing up resources.
     */
    bool unloadModel(int modelId);
    
    /**
     * @brief Gets the IDs of all loaded models.
     * @return A vector of model IDs.
     * 
     * Gets the IDs of all loaded models.
     */
    std::vector<int> getLoadedModelIds() const;
    
    /**
     * @brief Gets the name of a model.
     * @param modelId The ID of the model.
     * @return The name of the model.
     * 
     * Gets the name of a model.
     */
    juce::String getModelName(int modelId) const;
    
    /**
     * @brief Gets the description of a model.
     * @param modelId The ID of the model.
     * @return The description of the model.
     * 
     * Gets the description of a model.
     */
    juce::String getModelDescription(int modelId) const;
    
    /**
     * @brief Gets the version of a model.
     * @param modelId The ID of the model.
     * @return The version of the model.
     * 
     * Gets the version of a model.
     */
    juce::String getModelVersion(int modelId) const;
    
    /**
     * @brief Gets the author of a model.
     * @param modelId The ID of the model.
     * @return The author of the model.
     * 
     * Gets the author of a model.
     */
    juce::String getModelAuthor(int modelId) const;
    
    /**
     * @brief Gets the license of a model.
     * @param modelId The ID of the model.
     * @return The license of the model.
     * 
     * Gets the license of a model.
     */
    juce::String getModelLicense(int modelId) const;
    
    /**
     * @brief Timer callback.
     * 
     * Called periodically to generate insights.
     */
    void timerCallback() override;
    
    // Add file path member and file IO methods
    void setMidiDataFilePath(const juce::String& path);
    juce::String getMidiDataFilePath() const;
    
    // Add raw MIDI data recording
    void recordMidiData(const juce::MidiMessage& message, const juce::String& deviceName);
    
private:
    /**
     * @brief Records an insight to the MIDI data file.
     * @param insight The insight to record.
     *
     * Records an AI insight to be later written to the MIDI data file.
     */
    void recordInsight(const AIInsight& insight);
    
    /**
     * @brief The Rust ML context.
     * 
     * The Rust ML context used for processing MIDI data.
     */
    void* mlContext;
    
    /**
     * @brief The loaded models.
     * 
     * A map of model IDs to model names.
     */
    std::map<int, juce::String> loadedModels;
    
    /**
     * @brief The generated insights.
     * 
     * A vector of insights generated by the AI models.
     */
    std::vector<AIInsight> insights;
    
    /**
     * @brief The last time insights were generated.
     * 
     * The last time insights were generated, in milliseconds.
     */
    juce::int64 lastInsightTime;
    
    // Add file path and file stream
    juce::String midiDataFilePath;
    std::unique_ptr<juce::FileOutputStream> midiDataFile;
    
    // Add method to open/create the file
    bool openMidiDataFile();
    
    // Add tracking flag for JSON file formatting
    bool midiEventWritten = false;
    
    // Add vector for insights to record at shutdown
    std::vector<AIInsight> insightsToRecord;
};

} // namespace MidiPortal 