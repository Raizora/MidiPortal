# Build Commands

# Recommended: Use the build script (enforces Ninja and Apple Clang)
./build.sh                  # Build standalone only (Debug)
./build.sh --release        # Build standalone only (Release)
./build.sh --plugin         # Build standalone and plugin (Debug)
./build.sh --plugin --release # Build standalone and plugin (Release)

# Initial Setup
Build Rust library first:
cd rust && cargo build --release && cd ..

# Configure and build with Ninja (enforced)
rm -rf build
cmake -B build -G Ninja \
      -DCMAKE_C_COMPILER=/usr/bin/clang \
      -DCMAKE_CXX_COMPILER=/usr/bin/clang++ \
      -DCMAKE_BUILD_TYPE=Debug
cmake --build build

# Build standalone only (avoids VST3 helper issues)
cmake --build build --target MidiPortalStandalone

# Quick Rebuild (when only C++ changed)
cmake --build build

# Debug Build:
rm -rf build
cmake -B build -G Ninja \
      -DCMAKE_C_COMPILER=/usr/bin/clang \
      -DCMAKE_CXX_COMPILER=/usr/bin/clang++ \
      -DCMAKE_BUILD_TYPE=Debug
cmake --build build

# Debug with LLDB:
lldb ./build/standalone/MidiPortalStandalone
(lldb) run

# Release Build
rm -rf build
cmake -B build -G Ninja \
      -DCMAKE_C_COMPILER=/usr/bin/clang \
      -DCMAKE_CXX_COMPILER=/usr/bin/clang++ \
      -DCMAKE_BUILD_TYPE=Release
cmake --build build

# Run Commands

# Run Standalone (Debug)
./build/standalone/MidiPortalStandalone

# Run Standalone (Release)
./build/standalone/MidiPortalStandalone

# Run Plugin (Debug)
./build/plugin/AudioPlugin_artefacts/Debug/Standalone/MidiPortalPlugin.app/Contents/MacOS/MidiPortalPlugin

# Run Plugin (Release)
./build/plugin/AudioPlugin_artefacts/Release/Standalone/MidiPortalPlugin.app/Contents/MacOS/MidiPortalPlugin

# Quick Copy/Paste Combo
./build.sh && ./build/standalone/MidiPortalStandalone