# Commonly Used Git Commands for MidiPortal Project

## Branch Management
cd ~/JUCE_Projects/MidiPortal        # Navigate to the MidiPortal Repository
git branch                           # List local branches
git branch -r                        # List remote branches
git checkout cursor-development            # Switch to cursor-development branch
git checkout main                    # Switch to main branch
git checkout -b new-branch           # Create and switch to a new branch
git fetch origin                      # Fetch latest updates from remote
git pull origin cursor-development         # Pull latest changes from cursor-development branch
git push origin cursor-development         # Push local changes to cursor-development branch

## Committing Changes
git status                           # Check status of working directory
git add .                            # Stage all changes
git add README.md                    # Stage specific file
git commit -m "Commit message"       # Commit changes with a message
git commit --amend                   # Edit last commit message

## Pushing & Merging
git push origin cursor-development         # Push changes to cursor-development branch
git merge cursor-development               # Merge cursor-development into current branch
git merge --abort                    # Abort a merge in case of conflicts

## Resolving Conflicts
git status                           # Identify conflicting files
git add <file>                        # Mark conflict as resolved
git commit                           # Commit resolved merge

## Undoing Changes
git reset --soft HEAD~1              # Undo last commit, keep changes staged
git reset --hard HEAD~1              # Undo last commit, discard changes
git checkout -- <file>                # Discard local changes in a file

## Managing Remote Repositories
git remote -v                        # Show remote repository URLs
git remote add origin <repo-url>     # Add a new remote repository
git push -u origin cursor-development      # Push cursor-development branch to remote and track it

## Deleting Branches
git branch -d old-branch             # Delete local branch
git push origin --delete old-branch  # Delete remote branch

## CI/CD Related
git push origin cursor-development         # Push changes to trigger GitHub Actions
git log --oneline --graph --all      # View commit history graph

# ----------------------------------------
# Git Command Combos for MidiPortal Project
# ----------------------------------------

# 1. Add, Commit, and Push All Changes
git add . && git commit -m "Your commit message" && git push origin cursor-development

# 2. Add a Specific File, Commit, and Push
git add <file-name> && git commit -m "Updated <file-name>" && git push origin cursor-development

# 3. Amend Last Commit and Push (If You Forgot Something)
git commit --amend --no-edit && git push --force origin cursor-development

# 4. Fetch Latest Changes and Merge Into cursor-development
git fetch origin && git merge origin/cursor-development

# 5. Stash Changes, Pull Latest, Apply Stash
git stash && git pull origin cursor-development && git stash pop

# 6. Hard Reset to Remote (Dangerous, Be Careful!)
git fetch origin && git reset --hard origin/cursor-development

# 7. Create a New Branch, Switch to It, and Push to Remote
git checkout -b new-feature-branch && git push -u origin new-feature-branch

# 8. Delete a Local and Remote Branch
git branch -d old-branch && git push origin --delete old-branch

# 9. Undo Last Commit (But Keep Changes Staged)
git reset --soft HEAD~1

# 10. View Log Graph (Clean Commit History)
git log --oneline --graph --all --decorate

1. Create a Temporary Branch: This will save your current state.
    git checkout -b temp-save

2. Continue Working: You can now make changes, try new things, etc.

3. Revert to the Saved State: If you want to go back to the saved state, you can switch back to the temporary branch.
   git checkout temp-save

4. Save Again or Merge Changes: If you decide to keep the changes you made, you can merge them back into your main branch or save them in the temporary branch.
   git checkout main
   git merge temp-save

5. Delete the Temporary Branch: Once you're done and no longer need the temporary save, you can delete the branch.
   git branch -d temp-save

Basic Git Workflow Protocol

# Ensure you're on the cursor-development branch
git checkout cursor-development

# Push the current state of cursor-development to the remote repository
git push origin cursor-development

# Delete the local cursor-development-backup branch
git branch -d cursor-development-backup

# Delete the remote cursor-development-backup branch
git push origin --delete cursor-development-backup

# Create a new local cursor-development-backup branch based on the current state
git checkout -b cursor-development-backup

# Push the new cursor-development-backup branch to the remote repository and set it to track the remote branch
git push -u origin cursor-development-backup

quick recovery cheat code:
git config --global credential.helper osxkeychain

or

rm ~/.git-credentials   # (optional cleanup if it exists)
git config --global credential.helper osxkeychain

# ----------------------------------------
# Cursor Development Branch Management Protocol
# ----------------------------------------

# Quick Protocol for Updating cursor-development and cursor-development-backup

## 1. Update cursor-development-backup from cursor-development (after making changes to cursor-development)
# This single command sequence will:
# - Switch to cursor-development-backup
# - Merge changes from cursor-development (fast-forward if possible)
# - Push changes to remote
# - Switch back to cursor-development
git checkout cursor-development-backup && git merge cursor-development && git push origin cursor-development-backup && git checkout cursor-development

## 2. Create a fresh cursor-development-backup from cursor-development
# This will delete the old backup and create a new one (useful for a clean backup)
git checkout cursor-development && git branch -D cursor-development-backup && git push origin --delete cursor-development-backup && git checkout -b cursor-development-backup && git push -u origin cursor-development-backup && git checkout cursor-development

## 3. Push changes to both branches at once
# First commit your changes to cursor-development, then:
git push origin cursor-development && git checkout cursor-development-backup && git merge cursor-development && git push origin cursor-development-backup && git checkout cursor-development

## 4. Check if branches are in sync
# This will show if cursor-development-backup is behind cursor-development
git checkout cursor-development && git log -1 --pretty=format:"%H" > /tmp/cursor-dev-hash && git checkout cursor-development-backup && git log -1 --pretty=format:"%H" > /tmp/cursor-backup-hash && diff /tmp/cursor-dev-hash /tmp/cursor-backup-hash && echo "Branches are in sync!" || echo "Branches are NOT in sync!"

## 5. Quick recovery if something goes wrong
# If you accidentally mess up the branches, this will reset cursor-development-backup to match cursor-development exactly
git checkout cursor-development && git branch -D cursor-development-backup && git checkout -b cursor-development-backup && git push -f origin cursor-development-backup

# Note: Always make changes to cursor-development first, then update cursor-development-backup.
# cursor-development-backup should be treated as a read-only backup that mirrors cursor-development.

# Delete the local cursor-development-backup branch
# Push the deletion to the remote repository
# Create a new local cursor-development-backup branch based on the current state
# Push the new cursor-development-backup branch to the remote repository and set it to track the remote branch
git branch -d cursor-development-backup && git push origin --delete cursor-development-backup && git checkout -b cursor-development-backup && git push -u origin cursor-development-backup

# Delete the local cursor-development branch
# Push the deletion to the remote repository
# Create a new local cursor-development branch based on the current state
# Push the new cursor-development branch to the remote repository and set it to track the remote branch
git branch -d cursor-development && git push origin --delete cursor-development && git checkout -b cursor-development && git push -u origin cursor-development
